{"version":3,"sources":["components/auth/Login.js","components/auth/Signup.js","Pages/Homepage.js","components/Chat.js","context/ChatProvider.js","config/ChatLogic.js","components/ChatSearchLoading.js","components/UserListItem.js","components/UserBadge.js","components/GroupChatModal.js","components/ChatList.js","components/ProfileModal.js","components/UpdateGroupChatModal.js","components/MessagesDisplay.js","components/ChatContainer.js","components/Header.js","Pages/Chatpage.js","App.js","index.js"],"names":["Login","useState","show","setShow","email","setEmail","password","setPassword","loading","setLoading","toast","useToast","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","textAlign","label","hasArrow","placement","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","handleClick","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","ChatContext","createContext","ChatState","useContext","ChatProvider","children","selectedChat","setSelectedChat","user","setUser","notifications","setNotifications","chats","setChats","fetchAgain","setFetchAgain","userInfo","Provider","getSender","loggedUser","users","_id","isSameSender","messages","i","userId","length","sender","isLastMessage","isSameSenderMargin","isSameUser","ChatSearchLoading","height","UserListItem","genericHandlerFunction","cursor","_hover","background","color","alignItems","px","py","mr","src","UserBadge","admin","Close","pl","GroupChatModal","useDisclosure","isOpen","onOpen","onClose","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","handleSearch","query","Authorization","token","get","handleSubmit","map","u","isCentered","flexDir","flexWrap","userToDelete","filter","slice","userToAdd","includes","ChatList","setLoggedUser","fetchChats","deleteChat","chat","base","md","pb","lg","rightIcon","Add","overflowY","isGroupChat","chatName","latestMessage","content","substring","ProfileModal","icon","View","boxSize","alt","UpdateGroupChatModal","fetchMessages","renameloading","setRenameLoading","handleRename","put","chatId","handleAddUser","user1","find","groupAdmin","handleRemove","Hamburger","ml","MessagesDisplay","display","mt","backgroundColor","marginLeft","padding","maxWidth","Chat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","io","emit","on","sendMessage","key","newMessageReceived","ArrowBack","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","ChatContainer","Header","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c85670f5.chunk.js","sourcesContent":["import { Button } from '@chakra-ui/button';\r\nimport { FormControl, FormLabel } from '@chakra-ui/form-control';\r\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input';\r\nimport { VStack } from '@chakra-ui/layout';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Tooltip, useToast, Link } from '@chakra-ui/react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: 'Please Fill all the Feilds',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-type': 'application/json'\r\n        }\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        '/api/user/login',\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: 'Login Successful',\r\n        status: 'success',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      localStorage.setItem('userInfo', JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push('/chats');\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: error.response.data.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <VStack spacing='10px'>\r\n      <FormControl id='email' isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type='email'\r\n          placeholder='Enter Your Email Address'\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id='password' isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size='md'>\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? 'text' : 'password'}\r\n            placeholder='Enter password'\r\n          />\r\n          <InputRightElement width='4.5rem'>\r\n            <Button h='1.75rem' size='sm' onClick={handleClick}>\r\n              {show ? 'Hide' : 'Show'}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme='blue'\r\n        width='100%'\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Tooltip\r\n        style={{ textAlign: 'center' }}\r\n        label='Click this button to populate the form fields and login as a guest.'\r\n        hasArrow\r\n        placement='bottom'\r\n      >\r\n        <Button\r\n          variant='solid'\r\n          colorScheme='red'\r\n          width='100%'\r\n          onClick={() => {\r\n            setEmail('guest@example.com');\r\n            setPassword('123456');\r\n          }}\r\n        >\r\n          Login as a Guest\r\n        </Button>\r\n      </Tooltip>\r\n      <Link>Forgot Password?</Link>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from '@chakra-ui/button';\r\nimport { FormControl, FormLabel } from '@chakra-ui/form-control';\r\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input';\r\nimport { VStack } from '@chakra-ui/layout';\r\nimport { useToast } from '@chakra-ui/toast';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst Signup = () => {\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [loading, setLoading] = useState();\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const handleClick = () => setShow(!show);\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: 'Please select an image.',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      return;\r\n    }\r\n    console.log('pics: ', pics);\r\n    if (pics.type === 'image/jpeg' || pics.type === 'image/png') {\r\n      const data = new FormData();\r\n      data.append('file', pics);\r\n      data.append('upload_preset', 'mern-chat-app');\r\n      data.append('cloud_name', 'diyvyrpqt');\r\n      fetch('https://api.cloudinary.com/v1_1/diyvyrpqt/image/upload', {\r\n        method: 'post',\r\n        body: data\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log('data.url: ', data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: 'Please select an image file.',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: 'Please fill in all fields before submitting',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: 'Passwords do not match',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-type': 'application/json'\r\n        }\r\n      };\r\n      const { data } = await axios.post(\r\n        '/api/user',\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic\r\n        },\r\n        config\r\n      );\r\n      console.log('registration response data: ', data);\r\n      toast({\r\n        title: 'Registration Successful',\r\n        status: 'success',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      localStorage.setItem('userData', JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push('/chats');\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: error.response.data.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing='5px'>\r\n      <FormControl id='first-name' isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder='Enter Your Name'\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id='email' isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type='email'\r\n          placeholder='Enter Your Email Address'\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id='password' isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size='md'>\r\n          <Input\r\n            type={show ? 'text' : 'password'}\r\n            placeholder='Enter Password'\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width='4.5rem'>\r\n            <Button h='1.75rem' size='sm' onClick={handleClick}>\r\n              {show ? 'Hide' : 'Show'}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id='password' isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size='md'>\r\n          <Input\r\n            type={show ? 'text' : 'password'}\r\n            placeholder='Confirm password'\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width='4.5rem'>\r\n            <Button h='1.75rem' size='sm' onClick={handleClick}>\r\n              {show ? 'Hide' : 'Show'}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id='pic'>\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type='file'\r\n          p={1.5}\r\n          accept='image/*'\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme='blue'\r\n        width='100%'\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text\r\n} from '@chakra-ui/react';\r\nimport { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Login from '../components/auth/Login';\r\nimport Signup from '../components/auth/Signup';\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem('userInfo'));\r\n\r\n    if (user) history.push('/chats');\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW='xl' centerContent>\r\n      <Box\r\n        d='flex'\r\n        justifyContent='center'\r\n        p={3}\r\n        bg='white'\r\n        w='100%'\r\n        m='40px 0 15px 0'\r\n        borderRadius='lg'\r\n        borderWidth='1px'\r\n      >\r\n        <Text fontSize='4xl' fontFamily='Work sans'>\r\n          Mern Chat App\r\n        </Text>\r\n      </Box>\r\n      <Box bg='white' w='100%' p={4} borderRadius='lg' borderWidth='1px'>\r\n        <Tabs isFitted variant='soft-rounded'>\r\n          <TabList mb='1em'>\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ChatState } from '../context/ChatProvider';\r\nimport { Box, Text } from '@chakra-ui/layout';\r\nimport { FormControl } from '@chakra-ui/form-control';\r\nimport { Input } from '@chakra-ui/input';\r\nimport { IconButton, Spinner, useToast } from '@chakra-ui/react';\r\nimport { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport ProfileModal from './ProfileModal';\r\nimport { getSender, getSenderInfo } from '../config/ChatLogic';\r\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\r\nimport MessagesDisplay from './MessagesDisplay';\r\nimport Lottie from 'react-lottie';\r\nimport animationData from './typingAnimation/3759-typing.json';\r\nimport axios from 'axios';\r\nimport './style.css';\r\nimport io from 'socket.io-client';\r\nconst ENDPOINT = 'http://localhost:5000';\r\nlet socket, selectedChatCompare;\r\n\r\nconst Chat = () => {\r\n  const {\r\n    fetchAgain,\r\n    setFetchAgain,\r\n    user,\r\n    selectedChat,\r\n    setSelectedChat,\r\n    notifications,\r\n    setNotifications\r\n  } = ChatState();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: 'xMidYMid slice'\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit('setup', user);\r\n    socket.on('connected', () => setSocketConnected(true));\r\n    socket.on('typing', () => setIsTyping(true));\r\n    socket.on('stop typing', () => setIsTyping(false));\r\n  });\r\n\r\n  const handleTyping = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit('typing', selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    let timer = 3000;\r\n    setTimeout(() => {\r\n      let currentTime = new Date().getTime();\r\n      let timeDifferential = currentTime - lastTypingTime;\r\n      if (timeDifferential >= timer && typing) {\r\n        socket.emit('stop typing', selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timer);\r\n  };\r\n\r\n  const sendMessage = async (e) => {\r\n    if (e.key === 'Enter' && newMessage) {\r\n      socket.emit('stop typing', selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${user.token}`\r\n          }\r\n        };\r\n        setNewMessage('');\r\n        const { data } = await axios.post(\r\n          '/api/message',\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id\r\n          },\r\n          config\r\n        );\r\n\r\n        console.log('data: ', data);\r\n        socket.emit('new message', data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: 'Error Occured!',\r\n          description: 'Failed to send the Message',\r\n          status: 'error',\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: 'bottom'\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      console.log('messages: ', messages);\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit('join chat', selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: 'Failed to Load the Messages',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  console.log('notification: ', notifications);\r\n  useEffect(() => {\r\n    socket.on('message received', (newMessageReceived) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageReceived.chat._id\r\n      ) {\r\n        if (!notifications.includes(newMessageReceived)) {\r\n          setNotifications([newMessageReceived, ...notifications]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageReceived]);\r\n      }\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: '28px', md: '30px' }}\r\n            pb={3}\r\n            px={2}\r\n            w='100%'\r\n            fontFamily='Work sans'\r\n            d='flex'\r\n            justifyContent={{ base: 'space-between' }}\r\n            alignItems='center'\r\n          >\r\n            <IconButton\r\n              d={{ base: 'flex', md: 'none' }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat('')}\r\n            />\r\n\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  <ProfileModal\r\n                    user={getSenderInfo(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Text style={{ fontSize: '18px' }}>\r\n                    You are in a group chat named {selectedChat.chatName}\r\n                  </Text>\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d='flex'\r\n            flexDir='column'\r\n            justifyContent='flex-end'\r\n            p={3}\r\n            bg='#E8E8E8'\r\n            w='100%'\r\n            h='100%'\r\n            borderRadius='lg'\r\n            overflowY='hidden'\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size='xl'\r\n                w={20}\r\n                h={20}\r\n                alignSelf='center'\r\n                margin='auto'\r\n              />\r\n            ) : (\r\n              <div className='messages'>\r\n                <MessagesDisplay messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id='first-name'\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant='filled'\r\n                bg='#E0E0E0'\r\n                placeholder='Enter a message..'\r\n                value={newMessage}\r\n                onChange={handleTyping}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d='flex' alignItems='center' justifyContent='center' h='100%'>\r\n          <Text fontSize='3xl' pb={3} fontFamily='Work sans'>\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [chats, setChats] = useState();\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push('/');\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        chats,\r\n        setChats,\r\n        fetchAgain,\r\n        setFetchAgain,\r\n        notifications,\r\n        setNotifications\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","export const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderInfo = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return 'auto';\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n","import { Stack } from '@chakra-ui/layout';\r\nimport { Skeleton } from '@chakra-ui/skeleton';\r\n\r\nconst ChatSearchLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n      <Skeleton height='40px' />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatSearchLoading;\r\n","import { Avatar } from '@chakra-ui/avatar';\r\nimport { Box, Text } from '@chakra-ui/layout';\r\n\r\nconst UserListItem = ({ user, genericHandlerFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={genericHandlerFunction}\r\n      cursor='pointer'\r\n      bg='#E8E8E8'\r\n      _hover={{\r\n        background: '#0155fd',\r\n        color: 'white'\r\n      }}\r\n      w='100%'\r\n      d='flex'\r\n      alignItems='center'\r\n      color='black'\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius='lg'\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size='sm'\r\n        cursor='pointer'\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize='xs'>\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Badge } from '@chakra-ui/layout';\r\n\r\nconst UserBadge = ({ user, genericHandlerFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius='lg'\r\n      m={1}\r\n      mb={2}\r\n      variant='solid'\r\n      fontSize={12}\r\n      colorScheme='blue'\r\n      cursor='pointer'\r\n      onClick={genericHandlerFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadge;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box\r\n} from '@chakra-ui/react';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\nimport { ChatState } from '../context/ChatProvider';\r\nimport UserListItem from './UserListItem';\r\nimport UserBadge from './UserBadge';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\n\r\nexport const GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: 'Failed to Load the Search Results',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom-left'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: 'User has already been added to this group.',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'top'\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: 'Please fill all the feilds',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'top'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id))\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: 'New group chat created!',\r\n        status: 'success',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Failed to Create the Chat :-(',\r\n        description: error.response.data,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (userToDelete) => {\r\n    setSelectedUsers(\r\n      selectedUsers.filter((user) => user._id !== userToDelete._id)\r\n    );\r\n  };\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize='35px'\r\n            fontFamily='Work sans'\r\n            d='flex'\r\n            justifyContent='center'\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d='flex' flexDir='column' alignItems='center'>\r\n            <FormControl>\r\n              <Input\r\n                placeholder='Create Chat Name'\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder='Add Users'\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w='100%' d='flex' flexWrap='wrap'>\r\n              {selectedUsers.map((user) => (\r\n                <UserBadge\r\n                  key={user._id}\r\n                  user={user}\r\n                  genericHandlerFunction={() => handleDelete(user)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <Spinner d='flex' />\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    genericHandlerFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme='blue'>\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from '@chakra-ui/icons';\r\nimport { Box, Stack, Text } from '@chakra-ui/layout';\r\nimport { useToast } from '@chakra-ui/toast';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { getSender } from '../config/ChatLogic';\r\nimport ChatSearchLoading from './ChatSearchLoading';\r\nimport GroupChatModal from './GroupChatModal';\r\nimport { Button } from '@chakra-ui/react';\r\nimport { ChatState } from '../context/ChatProvider';\r\n\r\nconst ChatList = () => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats, fetchAgain } =\r\n    ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n\r\n      const { data } = await axios.get('/api/chat', config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: 'Failed to Load the chats',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom-left'\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteChat = (id) => {\r\n    chats.filter((chat) => id !== chat._id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem('userInfo')));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? 'none' : 'flex', md: 'flex' }}\r\n      flexDir='column'\r\n      alignItems='center'\r\n      p={3}\r\n      bg='white'\r\n      w={{ base: '100%', md: '31%' }}\r\n      borderRadius='lg'\r\n      borderWidth='1px'\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: '28px', md: '30px' }}\r\n        fontFamily='Work sans'\r\n        d='flex'\r\n        w='100%'\r\n        justifyContent='space-between'\r\n        alignItems='center'\r\n      >\r\n        <Text fontSize='xl'>Your Chats</Text>\r\n\r\n        <GroupChatModal>\r\n          <Button\r\n            d='flex'\r\n            fontSize={{ base: '17px', md: '10px', lg: '17px' }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            Create New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d='flex'\r\n        flexDir='column'\r\n        p={3}\r\n        bg='#F8F8F8'\r\n        w='100%'\r\n        h='100%'\r\n        borderRadius='lg'\r\n        overflowY='hidden'\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY='scroll'>\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor='pointer'\r\n                bg={selectedChat === chat ? '#4285f4' : '#E8E8E8'}\r\n                color={selectedChat === chat ? 'white' : 'black'}\r\n                px={3}\r\n                py={2}\r\n                borderRadius='lg'\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize='xs'>\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + '...'\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n                <Button onClick={deleteChat}> X </Button>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatSearchLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import { ViewIcon } from '@chakra-ui/icons';\r\nimport { getSender } from '../config/ChatLogic';\r\nimport { ChatState } from '../context/ChatProvider';\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n  Tooltip\r\n} from '@chakra-ui/react';\r\n\r\nconst ProfileModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const { user, selectedChat } = ChatState();\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <>\r\n          <Text style={{ fontSize: '18px' }}>\r\n            You are in a one on one chat with{' '}\r\n            {getSender(user, selectedChat.users)}\r\n          </Text>\r\n          <Tooltip\r\n            style={{ textAlign: 'center' }}\r\n            label='Click for chat partner info.'\r\n            hasArrow\r\n            placement='bottom'\r\n          >\r\n            <IconButton\r\n              d={{ base: 'flex' }}\r\n              icon={<ViewIcon />}\r\n              onClick={onOpen}\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      )}\r\n      <Modal size='lg' onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h='410px'>\r\n          <ModalHeader\r\n            fontSize='40px'\r\n            fontFamily='Work sans'\r\n            d='flex'\r\n            justifyContent='center'\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d='flex'\r\n            flexDir='column'\r\n            alignItems='center'\r\n            justifyContent='space-between'\r\n          >\r\n            <Image\r\n              borderRadius='full'\r\n              boxSize='150px'\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: '28px', md: '30px' }}\r\n              fontFamily='Work sans'\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { HamburgerIcon } from '@chakra-ui/icons';\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Tooltip,\r\n  Box,\r\n  IconButton,\r\n  Spinner\r\n} from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { ChatState } from '../context/ChatProvider';\r\nimport UserBadge from './UserBadge';\r\nimport UserListItem from './UserListItem';\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user, fetchAgain, setFetchAgain } =\r\n    ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: 'Failed to Load the Search Results',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom-left'\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/renamegroup`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log('data id: ', data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: error.response.data.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName('');\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((user) => user._id === user1._id)) {\r\n      toast({\r\n        title: 'User Already in group!',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: 'Only admins can add someone!',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/addusertogroup'`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: error.response.data.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName('');\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: 'Only admins can remove someone.',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/removeuserfromgroup`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: error.response.data.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom'\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Tooltip\r\n        label='Group Chat Details And Options.'\r\n        hasArrow\r\n        placement='bottom'\r\n      >\r\n        <IconButton\r\n          d={{ base: 'flex' }}\r\n          icon={<HamburgerIcon />}\r\n          onClick={onOpen}\r\n        />\r\n      </Tooltip>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize='35px'\r\n            fontFamily='Work sans'\r\n            d='flex'\r\n            justifyContent='center'\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d='flex' flexDir='column' alignItems='center'>\r\n            <Box w='100%' d='flex' flexWrap='wrap' pb={3}>\r\n              {selectedChat.users.map((user) => (\r\n                <UserBadge\r\n                  key={user._id}\r\n                  user={user}\r\n                  admin={selectedChat.groupAdmin}\r\n                  genericHandlerFunction={() => handleRemove(user)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d='flex'>\r\n              <Input\r\n                placeholder='Chat Name'\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant='solid'\r\n                colorScheme='blue'\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder='Add User to group'\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size='lg' />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  genericHandlerFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme='red'>\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import React from 'react';\r\nimport ScrollableFeed from 'react-scrollable-feed';\r\nimport { Avatar } from '@chakra-ui/avatar';\r\nimport { Tooltip } from '@chakra-ui/tooltip';\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser\r\n} from '../config/ChatLogic';\r\nimport { ChatState } from '../context/ChatProvider';\r\n\r\nconst MessagesDisplay = ({ messages }) => {\r\n  console.log('messages: ', messages);\r\n\r\n  const { user } = ChatState();\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: 'flex' }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement='bottom-start' hasArrow>\r\n                <Avatar\r\n                  mt='7px'\r\n                  mr={1}\r\n                  size='sm'\r\n                  cursor='pointer'\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? '#0155fd' : '#84cdf3'\r\n                }`,\r\n                color: `${m.sender._id === user._id ? '#fff' : '#000'}`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: '20px',\r\n                padding: '5px 15px',\r\n                maxWidth: '75%'\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default MessagesDisplay;\r\n","import { Box } from '@chakra-ui/layout';\r\nimport './style.css';\r\nimport Chat from './Chat';\r\nimport { ChatState } from '../context/ChatProvider';\r\n\r\nconst ChatContainer = () => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? 'flex' : 'none', md: 'flex' }}\r\n      alignItems='center'\r\n      flexDir='column'\r\n      p={3}\r\n      bg='white'\r\n      w={{ base: '100%', md: '68%' }}\r\n      borderRadius='lg'\r\n      borderWidth='1px'\r\n    >\r\n      <Chat />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n","import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  Input,\r\n  Text,\r\n  Tooltip,\r\n  useDisclosure\r\n} from '@chakra-ui/react';\r\nimport { useToast } from '@chakra-ui/toast';\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList\r\n} from '@chakra-ui/menu';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\nimport { BellIcon, ChevronDownIcon } from '@chakra-ui/icons';\r\nimport ProfileModal from './ProfileModal';\r\nimport ChatSearchLoading from './ChatSearchLoading';\r\nimport UserListItem from './UserListItem';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ChatState } from '../context/ChatProvider';\r\nimport { getSender } from '../config/ChatLogic';\r\nimport NotificationBadge from 'react-notification-badge';\r\nimport { Effect } from 'react-notification-badge';\r\nimport axios from 'axios';\r\n\r\nconst Header = () => {\r\n  const [search, setSearch] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notifications,\r\n    setNotifications,\r\n    chats,\r\n    setChats\r\n  } = ChatState();\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          'Content-type': 'application/json',\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error fetching the chat',\r\n        description: error.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom-left'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: 'Please Enter something in search',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'top-left'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`\r\n        }\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occured!',\r\n        description: 'Failed to Load the Search Results',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom-left'\r\n      });\r\n    }\r\n  };\r\n\r\n  const logOut = () => {\r\n    localStorage.removeItem('userInfo');\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d='flex'\r\n        justifyContent='space-between'\r\n        alignItems='center'\r\n        bg='white'\r\n        w='100%'\r\n        p='5px 10px 5px 10px'\r\n        borderWidth='5px'\r\n      >\r\n        <Text fontSize='2xl' fontFamily='Work sans'>\r\n          Welcome {user.name}\r\n        </Text>\r\n\r\n        <div>\r\n          <Tooltip\r\n            label='Search users to chat with'\r\n            hasArrow\r\n            placement='bottom-end'\r\n          >\r\n            <Button variant='ghost' onClick={onOpen}>\r\n              <i className='fas fa-search'></i>\r\n              <Text d={{ base: 'none', md: 'flex' }} px={4}>\r\n                Search Users\r\n              </Text>\r\n            </Button>\r\n          </Tooltip>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notifications.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize='2xl' m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notifications.length && 'You have no new messages'}\r\n              {notifications.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotifications(notifications.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg='white' rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size='sm'\r\n                cursor='pointer'\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logOut}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n      <Drawer placement='right' onClose={onClose} isOpen={isOpen} size='sm'>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth='1px'>\r\n            Search for a user.\r\n          </DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d='flex' pb={2}>\r\n              <Input\r\n                placeholder='Search by name or email'\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Search</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatSearchLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  genericHandlerFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml='auto' d='flex' />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { ChatState } from '../context/ChatProvider';\r\nimport { Box } from '@chakra-ui/layout';\r\nimport ChatList from '../components/ChatList';\r\nimport Chat from '../components/ChatContainer';\r\nimport Header from '../components/Header';\r\n\r\nconst Chatpage = () => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: '100%', backgroundColor: '#000' }}>\r\n      {user && <Header />}\r\n      <Box d='flex' justifyContent='space-between' w='100%' h='91.5vh' p='10px'>\r\n        {user && <Chat />}\r\n        {user && <ChatList />}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import './App.css';\r\nimport Homepage from './Pages/Homepage';\r\nimport { Route } from 'react-router-dom';\r\nimport Chatpage from './Pages/Chatpage';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Route path='/' component={Homepage} exact />\r\n      <Route path='/chats' component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ChatProvider from './context/ChatProvider';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <ChatProvider>\r\n      <ChakraProvider>\r\n        <App />\r\n      </ChakraProvider>\r\n    </ChatProvider>\r\n  </BrowserRouter>,\r\n\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}